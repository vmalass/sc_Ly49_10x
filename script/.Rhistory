knitr::opts_chunk$set(echo = T, fig.height=7, fig.width=7, fig.align="center")
if (!require('Seurat')) install.packages('Seurat'); library('Seurat')
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
if (!require('khroma')) install.packages('khroma'); library('khroma')
if (!require('future')) install.packages('future'); library('future')
if (!require('clustree')) install.packages('clustree'); library('clustree')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('openxlsx')) install.packages('openxlsx'); library('openxlsx')
if (!require('tidyr')) install.packages('tidyr'); library('tidyr')
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!require('org.Mm.eg.db')) BiocManager::install('org.Mm.eg.db'); library('org.Mm.eg.db')
if (!require('AnnotationDbi')) BiocManager::install('AnnotationDbi'); library('AnnotationDbi')
if (!require('enrichplot')) BiocManager::install('enrichplot'); library('enrichplot')
if (!require('clusterProfiler')) BiocManager::install('clusterProfiler'); library('clusterProfiler')
if (!require('ReactomePA')) BiocManager::install('ReactomePA'); library('ReactomePA')
if (!require('AUCell')) BiocManager::install('AUCell'); library('AUCell')
rm(list = ls())
plan("multiprocess", workers = 9) # activate parallelization
Singlet_norm <- readRDS("~/Documents/JM/singelcell_LY49/data/Singlet_norm_3.RDS")
Singlet_norm.markers_befor <- read.xlsx("~/Documents/JM/singelcell_LY49/SC_Ly49_10X/results/DE_befor_clusterization.xlsx")
Singlet_norm.markers_after <- read.xlsx("~/Documents/JM/singelcell_LY49/SC_Ly49_10X/results/DE_after_clusterization_reso04.xlsx")
Singlet_norm.markers_after_05 <- read.xlsx("~/Documents/JM/singelcell_LY49/SC_Ly49_10X/results/DE_after_clusterization_reso05.xlsx")
my_palette = c("Naive"= "#AA4499",
"Ly49n"= "#332288",
"VV-B8R"= "#DDCC77",
"Ly49p-CD8ab"= "#117733",
"Ly49p-CD8aa"= "#88CCEE",
"VV-Ly49p-CD8ab"= "#999933",
"VV-Ly49p-CD8aa"= "#882255",
"G1" = "salmon2",
"G2M" = "green4",
"S" = "dodgerblue")
### PCA ####
DimPlot(Singlet_norm,
reduction = "pca",
group.by = "HTO_maxID",
pt.size = 1,
cols = my_palette)+
labs(color = "legend ")+
ggtitle(label = "PCA")
### UMAP ###
DimPlot(Singlet_norm,
reduction = "umap",
group.by = "HTO_maxID",
pt.size = 1,
cols = my_palette,
label = T) +
labs(color = "Legend :") +
ggtitle(label = paste0("UMAP 11 CP"))
### UMAP cluster ###
DimPlot(Singlet_norm,
reduction = "umap",
group.by = "SCT_snn_res.0.4",
pt.size = 1,
label = T)+
labs(color = "legend ")+
ggtitle(label = paste0( "UMAP 11 CP et resolution : 0.4"))
### UMAP with Gzmm ###
FeaturePlot(Singlet_norm, features = "Gzmm")
### UMAP with Klrb1c ###
FeaturePlot(Singlet_norm, features = "Klrb1c")
FeaturePlot(Singlet_norm, features = "Tcrg-C1")
FeaturePlot(Singlet_norm, features = "Tcrg-C2")
FeaturePlot(Singlet_norm, features = "Tcrg-C3")
FeaturePlot(Singlet_norm, features = "Tcrg-V1")
FeaturePlot(Singlet_norm, features = "Tcrg-V3")
FeaturePlot(Singlet_norm, features = "Tcrg-V4")
FeaturePlot(Singlet_norm, features = "Tcrg-V6")
FeaturePlot(Singlet_norm, features = "Fcgrt")
FeaturePlot(Singlet_norm, features = "Fcer1g")
FeaturePlot(Singlet_norm, features = "Cxcr5")
FeaturePlot(Singlet_norm, features = "Klrd1")
FeaturePlot(Singlet_norm, features = "Klrc1")
FeaturePlot(Singlet_norm, features = "H2-Q2")
FeaturePlot(Singlet_norm, features = "H2-Q4")
FeaturePlot(Singlet_norm, features = "H2-Q6")
FeaturePlot(Singlet_norm, features = "H2-Q7")
FeaturePlot(Singlet_norm, features = "H2-Q10")
FeaturePlot(Singlet_norm, features = "H2-T23")
FeaturePlot(Singlet_norm, features = "H2-Aa")
FeaturePlot(Singlet_norm, features = "H2-Ab1")
FeaturePlot(Singlet_norm, features = "Tcf7")
FeaturePlot(Singlet_norm, features = "Fcgr2b")
FeaturePlot(Singlet_norm, features = "Fcgr3")
FeaturePlot(Singlet_norm, features = "Fcgrt")
FeaturePlot(Singlet_norm, features = "Fcer1g")
FeaturePlot(Singlet_norm, features = "Cxcr5")
FeaturePlot(Singlet_norm, features = "Lnpep")
FeaturePlot(Singlet_norm, features = "Syk")
FeaturePlot(Singlet_norm, features = "Zap70")
### DE ###
###### Population ######
Singlet_norm.markers_befor %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(Singlet_norm, features = top10$gene, group.by = "HTO_maxID", group.colors = my_palette) +
# NoLegend() +
ggtitle(label = "Heatmaps du DE top 10 gènes entre les différentes populations")
###### Cluster ######
Singlet_norm.markers_after %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(Singlet_norm, features = top10$gene, group.by = "SCT_snn_res.0.4") +
# NoLegend() +
ggtitle(label = "Heatmaps du DE top 10 gènes entre les différents clusters")
# A list of cell cycle markers, from Tirosh et al, 2015, is loaded with Seurat.  We can
# segregate this list into markers of G2/M phase and markers of S phase
s.genes <- cc.genes$s.genes
s.genes <- tolower(s.genes)
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
s.genes <- firstup(s.genes)
g2m.genes <- cc.genes$g2m.genes
g2m.genes <- tolower(g2m.genes)
g2m.genes <- firstup(g2m.genes)
Singlet_norm <- CellCycleScoring(Singlet_norm,
s.features = s.genes,
g2m.features = g2m.genes,
set.ident = TRUE)
DimPlot(Singlet_norm,
reduction = "umap",
group.by = "Phase",
pt.size = 1,
cols = my_palette) +
ggtitle(label = "Cell Cycle Phase")
# Visualize the distribution of cell cycle markers across
RidgePlot(Singlet_norm, features = c("Pcna", "Top2a", "Mcm6", "Mki67"), ncol = 2, cols = my_palette)
metadata <- as.data.frame(Singlet_norm@meta.data[["HTO_maxID"]])
metadata <- cbind(metadata,as.data.frame(Singlet_norm@meta.data[["Phase"]]))
metadata <- cbind(metadata, as.data.frame(Singlet_norm@meta.data[["SCT_snn_res.0.4"]]))
colnames(metadata)<- c("population","phase","cluster")
metadata %>%
count(cluster, phase) %>%
arrange(cluster, phase) %>%
mutate(pct_total = n / sum(n) * 100) -> a
clus <- seq(0,10,1)
Metadata_final <- NULL
for (i in clus) {
inter <- a[which(a$cluster %in% i),]
inter <- inter %>%
mutate(pct_cluster = n / sum(n) * 100)
Metadata_final <- rbind(Metadata_final, inter)
}
### percent ###
ggplot(Metadata_final, aes(fill = phase, y = pct_cluster, x = cluster)) +
geom_bar(position='dodge', stat='identity') +
scale_fill_manual(values= my_palette) +
theme_minimal() +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
ggtitle(label = "Cell cycle phase by cluster")
ggplot(Metadata_final, aes(fill=phase, y=pct_cluster, x=phase)) +
geom_bar(position='dodge', stat='identity') +
scale_fill_manual(values= my_palette) +
theme(axis.text.x = element_text(angle = 45, vjust = 1.05, hjust=1),
panel.background = element_blank(),
axis.line = element_line(colour = "grey")) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
ggtitle(label = paste0("Cell cycle phase by cluster in percent")) +
facet_wrap(~cluster, scales='free_x')
### absolute ###
ggplot(Metadata_final, aes(fill = phase, y = n, x = cluster)) +
geom_bar(position='dodge', stat='identity') +
scale_fill_manual(values= my_palette) +
theme_minimal() +
scale_y_continuous(limits = c(0,1500)) +
ggtitle(label = "Cell cycle phase by cluster")
ggplot(Metadata_final, aes(fill=phase, y=n, x=phase)) +
geom_bar(position='dodge', stat='identity') +
scale_fill_manual(values= my_palette) +
theme(axis.text.x = element_text(angle = 45, vjust = 1.05, hjust=1),
panel.background = element_blank(),
axis.line = element_line(colour = "grey")) +
scale_y_continuous(limits = c(0,1500)) +
ggtitle(label = paste0("Cell cycle phase by cluster ")) +
facet_wrap(~cluster, scales='free_x')
metadata %>%
count(population, cluster) %>%
arrange(cluster, population) %>%
mutate(pct_total = n / sum(n) * 100) -> a
clus <- seq(0,10,1)
Metadata_final <- NULL
for (i in clus) {
inter <- a[which(a$cluster %in% i),]
inter <- inter %>%
mutate(pct_cluster = n / sum(n) * 100)
Metadata_final <- rbind(Metadata_final, inter)
}
### percent ###
ggplot(Metadata_final, aes(fill=population, y=pct_cluster, x=cluster)) +
geom_bar(position='dodge', stat='identity') +
scale_fill_manual(values= my_palette) +
theme_minimal() +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
ggtitle(label = "Population by cluster")
ggplot(Metadata_final, aes(fill=population, y=pct_cluster, x=population)) +
geom_bar(position='dodge', stat='identity') +
theme(axis.text.x = element_text(angle = 45, vjust = 1.05, hjust=1),
panel.background = element_blank(),
axis.line = element_line(colour = "grey")) +
scale_fill_manual(values= my_palette) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
ggtitle(label = paste0("Population by cluster in percent")) +
facet_wrap(~cluster, scales='free_x')
### Absolute ###
ggplot(Metadata_final, aes(fill=population, y=n, x=cluster)) +
geom_bar(position='dodge', stat='identity') +
scale_fill_manual(values= my_palette) +
theme_minimal() +
scale_y_continuous(limits = c(0,1200)) +
ggtitle(label = "Population by cluster")
ggplot(Metadata_final, aes(fill=population, y=n, x=population)) +
geom_bar(position='dodge', stat='identity') +
theme(axis.text.x = element_text(angle = 45, vjust = 1.05, hjust=1),
panel.background = element_blank(),
axis.line = element_line(colour = "grey")) +
scale_fill_manual(values= my_palette) +
scale_y_continuous(limits = c(0,1200)) +
ggtitle(label = paste0("Population by cluster")) +
facet_wrap(~cluster, scales='free_x')
